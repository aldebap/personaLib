{
	"info": {
		"_postman_id": "5cc42265-da91-4567-b949-78ebca8e203f",
		"name": "Integrated Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Valid tests for /author",
			"item": [
				{
					"name": "Add an author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 201 Created\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 201 );",
									"});",
									"",
									"//  Parse the response to get the Id of new author",
									"var jsonData = JSON.parse( responseBody );",
									"",
									"postman.setGlobalVariable( 'author-id', jsonData.id );",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'author-name', \"Jack Kerouac\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{author-name}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an account by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 200 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 200 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{author-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all authors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 200 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 200 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 200 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 200 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'author-name', \"Jack London\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{author-name}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{author-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an author",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 200 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 200 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{author-id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Error tests for /author",
			"item": [
				{
					"name": "Invalid content-type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 415 Unsupported Media Type\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 415 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<author>\n    <name>{{author-name}}</name>\n</author>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing content length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 411 Length Required\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 411 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-length": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<author>\n    <name>{{author-name}}</name>\n</author>\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty author's name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'author-name', \"\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{author-name}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author"
							]
						}
					},
					"response": []
				},
				{
					"name": "Author's name bigger that limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'author-name', \"Joao Jose da Silva de Oliveira Xavier Brandao de Alcantara\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{author-name}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author"
							]
						}
					},
					"response": []
				},
				{
					"name": "Author's name with invalid characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'author-name', \"Joao Jose 'da Silva'\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{author-name}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an author by invalid ID size",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'wrong-author-id', \"6262626262626262626262\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{wrong-author-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an author by invalid ID content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'wrong-author-id', \"az6262626262626262626262\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{wrong-author-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an author with invalid ID size",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'author-name', \"Jack London\" );",
									"",
									"postman.setGlobalVariable( 'wrong-author-id', \"6262626262626262626262\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{author-name}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{wrong-author-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an author with invalid ID content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'author-name', \"Jack London\" );",
									"",
									"postman.setGlobalVariable( 'wrong-author-id', \"az6262626262626262626262\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{author-name}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{wrong-author-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update an author with id parameter different from the id on payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'author-id', \"62144f358480935f4e1400f0\" );",
									"postman.setGlobalVariable( 'author-name', \"Jack London\" );",
									"",
									"postman.setGlobalVariable( 'wrong-author-id', \"626262626262626262626262\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{wrong-author-id}}\",\n    \"name\": \"{{author-name}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{author-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an author with invalid ID size",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'wrong-author-id', \"6262626262626262626262\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{wrong-author-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an author with invalid ID content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'wrong-author-id', \"az6262626262626262626262\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/author/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"author",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{wrong-author-id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Valid tests for /publisher",
			"item": [
				{
					"name": "Add a publisher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 201 Created\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 201 );",
									"});",
									"",
									"//  Parse the response to get the Id of new author",
									"var jsonData = JSON.parse( responseBody );",
									"",
									"postman.setGlobalVariable( 'publisher-id', jsonData.id );",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'publisher-name', \"Penguin Books\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{publisher-name}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a publisher by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 200 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 200 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{publisher-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all publishers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 200 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 200 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a publisher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 200 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 200 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'publisher-name', \"City Light Books\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{publisher-name}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{publisher-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a publisher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 200 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 200 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{publisher-id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Error tests for /publisher",
			"item": [
				{
					"name": "Invalid content-type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 415 Unsupported Media Type\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 415 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<publisher>\n    <name>{{publisher-name}}</name>\n</publisher>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing content length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 411 Length Required\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 411 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-length": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<publisher>\n    <name>{{publisher-name}}</name>\n</publisher>\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty publisher's name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'publisher-name', \"\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{publisher-name}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher's name bigger that limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'publisher-name', \"Editora Geral de Livros Impressos em meios tradicionais e digitais da República Federativa do Brasil\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{publisher-name}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publisher's name with invalid characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'publisher-name', \"Editora do 'José Silva'\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{publisher-name}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a publisher by invalid ID size",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'wrong-publisher-id', \"6262626262626262626262\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{wrong-publisher-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a publisher by invalid ID content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'wrong-publisher-id', \"az6262626262626262626262\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{wrong-publisher-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a publisher with invalid ID size",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'publisher-name', \"Editora Metal\" );",
									"",
									"postman.setGlobalVariable( 'wrong-publisher-id', \"6262626262626262626262\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{publisher-name}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{wrong-publisher-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a publisher with id parameter different from the id on payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'publisher-id', \"62144f358480935f4e1400f0\" );",
									"postman.setGlobalVariable( 'publisher-name', \"Editora Metal\" );",
									"",
									"postman.setGlobalVariable( 'wrong-publisher-id', \"626262626262626262626262\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{wrong-publisher-id}}\",\n    \"name\": \"{{publisher-name}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{publisher-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a publisher with invalid ID size",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'wrong-publisher-id', \"6262626262626262626262\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{wrong-publisher-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a publisher with invalid ID content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'wrong-publisher-id', \"az6262626262626262626262\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/publisher/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"publisher",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{wrong-publisher-id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Valid tests for /book",
			"item": [
				{
					"name": "Add a book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 201 Created\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 201 );",
									"});",
									"",
									"//  Parse the response to get the Id of new book",
									"var jsonData = JSON.parse( responseBody );",
									"",
									"postman.setGlobalVariable( 'book-id', jsonData.id );",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'book-title', \"On the Road\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{book-title}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/book",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"book"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a book by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 200 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 200 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app-domain}}/book/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"book",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{book-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 200 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 200 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{app-domain}}/book",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"book"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 200 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 200 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'book-title', \"Visions of Cody\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{book-title}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/book/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"book",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{book-id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 200 OK\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 200 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{app-domain}}/book/:id",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"book",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{book-id}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Error tests for /book",
			"item": [
				{
					"name": "Invalid content-type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 415 Unsupported Media Type\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 415 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<publisher>\n    <name>{{book-title}}</name>\n</publisher>\n",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/book",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"book"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing content length",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 411 Length Required\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 411 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-length": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/book",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"book"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/book",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"book"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<publisher>\n    <name>{{book-title}}</name>\n</publisher>\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/book",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"book"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty book's title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'book-title', \"\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{book-title}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/book",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"book"
							]
						}
					},
					"response": []
				},
				{
					"name": "Book's title bigger that limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'book-title', \"On the Road: Pé na estrada, pé na tábua, vamos de carona, entrei de gaiato num navio, entrei pelo cano\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{book-title}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/book",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"book"
							]
						}
					},
					"response": []
				},
				{
					"name": "Book's title with invalid characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//  check the HTTP return code",
									"pm.test(\"HTTP retornou 400 Bad Request\", () => {",
									"    pm.expect( responseCode.code ).to.eql( 400 );",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//  set the data for the test",
									"postman.setGlobalVariable( 'book-title', \"On the Road: 'Pé na estrada'\" );",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{book-title}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{app-domain}}/book",
							"host": [
								"{{app-domain}}"
							],
							"path": [
								"book"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}